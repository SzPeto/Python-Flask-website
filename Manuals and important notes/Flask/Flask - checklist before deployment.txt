✅ DEPLOYMENT SECURITY CHECKLIST (Flask + Jinja2)

TEMPLATE SECURITY (Jinja2):
    ☑ All user-controlled data in:
        - JavaScript → escaped with `|escape`
        - HTML attributes → escaped with `|escape`
        - HTML body content → NOT using `|safe` unless input is sanitized

    ☑ Avoid using `|safe` unless:
        - You sanitize the data manually (e.g. with Bleach)
        - You fully control the content (e.g. admin-generated HTML)

    ☑ Autoescaping is ON (default in Jinja2)
    ☑ No inline JavaScript with Jinja2 containing unescaped variables

FORMS & USER INPUT:
    ☑ All forms use CSRF protection (e.g. Flask-WTF or `{{ form.csrf_token }}`)
    ☑ Validate all user input server-side
    ☑ Escape/strip dangerous characters before saving or displaying (if needed)

AUTHENTICATION:
    ☑ Passwords hashed using `werkzeug.security.generate_password_hash()`
    ☑ User sessions use `login_user()` and `@login_required` properly
    ☑ Sensitive routes protected by authentication
    ☑ User permissions are checked before allowing access to data/actions

CONFIGURATION:
    ☑ `DEBUG = False` in production
    ☑ `SECRET_KEY` is set and strong (not default, not hardcoded in codebase)
    ☑ Sensitive credentials (e.g. email password, DB URI) are stored in `.env` or environment variables
    ☑ Flask Mail or other services use secure credentials from environment

HEADERS & COOKIES:
    ☑ Set `SESSION_COOKIE_HTTPONLY = True`
    ☑ Set `SESSION_COOKIE_SECURE = True` (when using HTTPS)
    ☑ Consider using `Content-Security-Policy` and `X-Content-Type-Options` headers

DATABASE:
    ☑ Parameterized queries or ORM (never raw SQL with user input)
    ☑ User input is validated before inserting into database
    ☑ Backups are taken regularly and securely stored

STATIC FILES & ROUTES:
    ☑ No sensitive data in static files (API keys, passwords, etc.)
    ☑ Routes do not expose internal logic or admin features to public
    ☑ Error pages do not leak stack traces (`DEBUG = False`)

LOGGING & MONITORING:
    ☑ Logging is enabled (but avoids logging passwords or personal data)
    ☑ Errors are logged to file or external service
    ☑ Suspicious activity (e.g. failed logins) is logged

EXTRA SECURITY (optional but great):
    ☑ Use HTTPS with a valid SSL certificate
    ☑ Enable rate limiting or CAPTCHA on sensitive forms
    ☑ Sanitize file uploads (check type, size, and extension)
    ☑ Run security tools like `bandit` or `flask-security-audit`